{"ast":null,"code":"var _jsxFileName = \"/app/src/Pages/Reset.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport '../App.css';\nimport './Reset.css';\nimport { Button } from 'reactstrap';\nimport { Formik, Form, Field } from 'formik';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\nimport { validateResetPassword, sendPasswordReset } from '../Api/index';\nimport AuthContext from '../Contexts/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reset = route => {\n  _s();\n\n  let boolTrue = true;\n  const [loading, setLoading] = useState(true);\n  const [reset, setReset] = useState({});\n  const [sent, setSent] = useState(false);\n  let {\n    ResetPassword\n  } = useContext(AuthContext);\n  let reqToken = false;\n\n  if (route && route.match && route.match.params && route.match.params.token) {\n    reqToken = route.match.params.token;\n  }\n\n  const sendReset = values => {\n    sendPasswordReset(values).then(() => {\n      setSent(true);\n    });\n  };\n\n  useEffect(() => {\n    if (!reqToken) {\n      setLoading(false);\n      return false;\n    }\n\n    validateResetPassword(reqToken).then(data => {\n      setReset(data);\n      setLoading(false);\n    });\n  }, [reqToken]);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageWrapper\",\n      children: /*#__PURE__*/_jsxDEV(ScaleLoader, {\n        color: \"#6AD7E5\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (sent) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageWrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Check your email!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!reqToken) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageWrapper\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Reset Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"pageBody\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            email: ''\n          },\n          onSubmit: values => sendReset(values),\n          children: /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              children: [\"Email\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 20\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                name: \"email\",\n                type: \"email\",\n                required: boolTrue,\n                className: \"loginFields\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 74,\n                columnNumber: 15\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 81,\n              columnNumber: 18\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              type: \"submit\",\n              className: \"loginButton\",\n              disabled: loading,\n              children: loading ? /*#__PURE__*/_jsxDEV(ScaleLoader, {\n                color: \"#FFF\",\n                size: 35\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 25\n              }, this) : \"Reset\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (reqToken && !reset.valid) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageWrapper\",\n      children: \"Invalid Reset Token or Token expired\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"pageWrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Reset Password\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"resetBody\",\n      children: /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          password: '',\n          comfirmpassword: '',\n          token: reqToken\n        },\n        onSubmit: values => ResetPassword(values),\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"New Password\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 115,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: \"password\",\n              type: \"password\",\n              required: boolTrue,\n              className: \"resetFields\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"Confirm New Password\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 125,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Field, {\n              name: \"comfirmpassword\",\n              type: \"password\",\n              required: boolTrue,\n              className: \"resetFields\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 126,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 124,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            name: \"token\",\n            type: \"hidden\",\n            className: \"resetFields\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 16\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"primary\",\n            type: \"submit\",\n            className: \"loginButton\",\n            disabled: loading,\n            children: loading ? /*#__PURE__*/_jsxDEV(ScaleLoader, {\n              color: \"#FFF\",\n              size: 35\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 23\n            }, this) : \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Reset, \"ErBGjjAx7cEc23SGzcGk2R8F/8Y=\");\n\n_c = Reset;\nexport default Reset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reset\");","map":{"version":3,"sources":["/app/src/Pages/Reset.js"],"names":["React","useState","useEffect","useContext","Button","Formik","Form","Field","ScaleLoader","validateResetPassword","sendPasswordReset","AuthContext","Reset","route","boolTrue","loading","setLoading","reset","setReset","sent","setSent","ResetPassword","reqToken","match","params","token","sendReset","values","then","data","email","valid","password","comfirmpassword"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport '../App.css';\nimport './Reset.css';\nimport { Button } from 'reactstrap';\nimport { Formik, Form, Field } from 'formik';\nimport ScaleLoader from 'react-spinners/ScaleLoader';\nimport { validateResetPassword, sendPasswordReset } from '../Api/index';\nimport AuthContext from '../Contexts/AuthContext';\n\nconst Reset = (route) => {\n  let boolTrue = true;\n  const [loading, setLoading] = useState(true);\n  const [reset, setReset] = useState({});\n  const [sent, setSent] = useState(false);\n\n  let { ResetPassword } = useContext(AuthContext);\n\n  let reqToken = false;\n  if (route && route.match && route.match.params && route.match.params.token) {\n    reqToken = route.match.params.token\n  }\n\n  const sendReset = (values) => {\n    sendPasswordReset(values).then(() => {\n      setSent(true);\n    });\n  }\n\n  useEffect(() => {\n    if (!reqToken) {\n      setLoading(false);\n      return false;\n    }\n\n    validateResetPassword(reqToken)\n      .then(data => {\n        setReset(data);\n        setLoading(false);\n      })\n  }, [reqToken])\n\n  if (loading) {\n    return (\n      <div className=\"pageWrapper\">\n        <ScaleLoader color=\"#6AD7E5\" />\n      </div>\n    )\n  }\n\n  if (sent) {\n    return (\n      <div className=\"pageWrapper\">\n        <h1>\n          Check your email!\n        </h1>\n      </div>\n    )\n  }\n\n  if (!reqToken) {\n    return (\n      <div className=\"pageWrapper\">\n        <h1>\n          Reset Password\n        </h1>\n        <div className=\"pageBody\">\n          <Formik\n            initialValues={{ email: '' }}\n            onSubmit={values => sendReset(values)}\n          >\n            <Form>\n            <label>\n              Email<br/>\n              <Field\n                name=\"email\"\n                type=\"email\"\n                required={boolTrue}\n                className=\"loginFields\"\n              />\n            </label>\n            <br/><br/>\n            <Button\n              color=\"primary\"\n              type=\"submit\"\n              className=\"loginButton\"\n              disabled={loading}\n            >{loading ? <ScaleLoader color=\"#FFF\" size={35} /> : \"Reset\"}</Button>\n          </Form>\n          </Formik>\n        </div>\n      </div>\n    )\n  }\n\n  if (reqToken && !reset.valid) {\n    return (\n      <div className=\"pageWrapper\">\n        Invalid Reset Token or Token expired\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"pageWrapper\">\n      <h1>\n        Reset Password\n      </h1>\n      <div className=\"resetBody\">\n        <Formik\n          initialValues={{ password: '', comfirmpassword: '', token: reqToken }}\n          onSubmit={values => ResetPassword(values)}\n        >\n          <Form>\n          <label>\n            New Password<br/>\n            <Field\n              name=\"password\"\n              type=\"password\"\n              required={boolTrue}\n              className=\"resetFields\"\n            />\n          </label>\n          <br/>\n          <label>\n            Confirm New Password<br/>\n            <Field\n              name=\"comfirmpassword\"\n              type=\"password\"\n              required={boolTrue}\n              className=\"resetFields\"\n            />\n          </label>\n          <Field\n              name=\"token\"\n              type=\"hidden\"\n              className=\"resetFields\"\n            />\n          <br/><br/>\n          <Button\n            color=\"primary\"\n            type=\"submit\"\n            className=\"loginButton\"\n            disabled={loading}\n          >{loading ? <ScaleLoader color=\"#FFF\" size={35} /> : \"Reset\"}</Button>\n        </Form>\n        </Formik>\n      </div>\n    </div>\n  );\n}\n\nexport default Reset;\n"]},"metadata":{},"sourceType":"module"}