{"ast":null,"code":"import React from 'react';\nimport Select from 'react-select';\nimport spacetime from 'spacetime';\nimport { display } from 'spacetime-informal';\nexport const i18nTimezones = {\n  'Pacific/Midway': 'Midway Island, Samoa',\n  'Pacific/Honolulu': 'Hawaii',\n  'America/Juneau': 'Alaska',\n  'America/Boise': 'Mountain Time',\n  'America/Dawson': 'Dawson, Yukon',\n  'America/Chihuahua': 'Chihuahua, La Paz, Mazatlan',\n  'America/Phoenix': 'Arizona',\n  'America/Chicago': 'Central Time',\n  'America/Regina': 'Saskatchewan',\n  'America/Mexico_City': 'Guadalajara, Mexico City, Monterrey',\n  'America/Belize': 'Central America',\n  'America/Detroit': 'Eastern Time',\n  'America/Bogota': 'Bogota, Lima, Quito',\n  'America/Caracas': 'Caracas, La Paz',\n  'America/Santiago': 'Santiago',\n  'America/St_Johns': 'Newfoundland and Labrador',\n  'America/Sao_Paulo': 'Brasilia',\n  'America/Tijuana': 'Tijuana, Pacific Time',\n  'America/Argentina/Buenos_Aires': 'Buenos Aires, Georgetown',\n  'America/Godthab': 'Greenland',\n  'Atlantic/Azores': 'Azores',\n  'Atlantic/Cape_Verde': 'Cape Verde Islands',\n  GMT: 'Dublin, Edinburgh, Lisbon, London',\n  'Africa/Casablanca': 'Casablanca, Monrovia',\n  'Atlantic/Canary': 'Canary Islands',\n  'Europe/Belgrade': 'Belgrade, Bratislava, Budapest, Ljubljana, Prague',\n  'Europe/Sarajevo': 'Sarajevo, Skopje, Warsaw, Zagreb',\n  'Europe/Brussels': 'Brussels, Copenhagen, Madrid, Paris',\n  'Europe/Amsterdam': 'Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',\n  'Africa/Algiers': 'West Central Africa',\n  'Europe/Bucharest': 'Bucharest',\n  'Africa/Cairo': 'Cairo',\n  'Europe/Helsinki': 'Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius',\n  'Europe/Athens': 'Athens, Istanbul, Minsk',\n  'Asia/Jerusalem': 'Jerusalem',\n  'Africa/Harare': 'Harare, Pretoria',\n  'Europe/Moscow': 'Moscow, St. Petersburg, Volgograd',\n  'Asia/Kuwait': 'Kuwait, Riyadh',\n  'Africa/Nairobi': 'Nairobi',\n  'Asia/Baghdad': 'Baghdad',\n  'Asia/Tehran': 'Tehran',\n  'Asia/Dubai': 'Abu Dhabi, Muscat',\n  'Asia/Baku': 'Baku, Tbilisi, Yerevan',\n  'Asia/Kabul': 'Kabul',\n  'Asia/Yekaterinburg': 'Ekaterinburg',\n  'Asia/Karachi': 'Islamabad, Karachi, Tashkent',\n  'Asia/Kolkata': 'Chennai, Kolkata, Mumbai, New Delhi',\n  'Asia/Kathmandu': 'Kathmandu',\n  'Asia/Dhaka': 'Astana, Dhaka',\n  'Asia/Colombo': 'Sri Jayawardenepura',\n  'Asia/Almaty': 'Almaty, Novosibirsk',\n  'Asia/Rangoon': 'Yangon Rangoon',\n  'Asia/Bangkok': 'Bangkok, Hanoi, Jakarta',\n  'Asia/Krasnoyarsk': 'Krasnoyarsk',\n  'Asia/Shanghai': 'Beijing, Chongqing, Hong Kong SAR, Urumqi',\n  'Asia/Kuala_Lumpur': 'Kuala Lumpur, Singapore',\n  'Asia/Taipei': 'Taipei',\n  'Australia/Perth': 'Perth',\n  'Asia/Irkutsk': 'Irkutsk, Ulaanbaatar',\n  'Asia/Seoul': 'Seoul',\n  'Asia/Tokyo': 'Osaka, Sapporo, Tokyo',\n  'Asia/Yakutsk': 'Yakutsk',\n  'Australia/Darwin': 'Darwin',\n  'Australia/Adelaide': 'Adelaide',\n  'Australia/Sydney': 'Canberra, Melbourne, Sydney',\n  'Australia/Brisbane': 'Brisbane',\n  'Australia/Hobart': 'Hobart',\n  'Asia/Vladivostok': 'Vladivostok',\n  'Pacific/Guam': 'Guam, Port Moresby',\n  'Asia/Magadan': 'Magadan, Solomon Islands, New Caledonia',\n  'Asia/Kamchatka': 'Kamchatka, Marshall Islands',\n  'Pacific/Fiji': 'Fiji Islands',\n  'Pacific/Auckland': 'Auckland, Wellington',\n  'Pacific/Tongatapu': \"Nuku'alofa\"\n};\n\nconst TimezoneSelect = ({\n  value,\n  onBlur,\n  onChange,\n  labelStyle = 'original',\n  timezones = i18nTimezones,\n  ...props\n}) => {\n  const getOptions = React.useMemo(() => {\n    return Object.entries(timezones).reduce((obj, entry) => {\n      const a = spacetime.now().goto(entry[0]);\n      const tz = a.timezone();\n      const tzDisplay = display(entry[0]);\n      let label = '';\n      let abbrev = entry[0];\n      let altName = entry[0];\n\n      if (tzDisplay && tzDisplay.daylight && tzDisplay.standard) {\n        abbrev = a.isDST() ? tzDisplay.daylight.abbrev : tzDisplay.standard.abbrev;\n        altName = a.isDST() ? tzDisplay.daylight.name : tzDisplay.standard.name;\n      }\n\n      const min = tz.current.offset * 60;\n      const hr = `${min / 60 ^ 0}:` + (min % 60 === 0 ? '00' : Math.abs(min % 60));\n      const prefix = `(GMT${hr.includes('-') ? hr : `+${hr}`}) ${entry[1]}`;\n\n      switch (labelStyle) {\n        case 'original':\n          label = prefix;\n          break;\n\n        case 'altName':\n          label = `${prefix} ${!altName.includes('/') ? `(${altName})` : ''}`;\n          break;\n\n        case 'abbrev':\n          label = `${prefix} ${abbrev.length < 5 ? `(${abbrev})` : ''}`;\n          break;\n\n        default:\n          label = `${prefix}`;\n      }\n\n      obj.push({\n        value: entry[0],\n        label: label,\n        offset: tz.current.offset,\n        abbrev: abbrev,\n        altName: altName\n      });\n      return obj;\n    }, []).sort((a, b) => {\n      return a.offset - b.offset;\n    });\n  }, [labelStyle, timezones]);\n\n  const handleChange = tz => {\n    onChange && onChange(tz);\n  };\n\n  const parseTimezone = value => {\n    if (typeof value === 'object' && value.value && value.label) return value;\n\n    if (typeof value === 'string') {\n      return getOptions.find(tz => tz.value === value);\n    } else if (value.value && !value.label) {\n      return getOptions.find(tz => tz.value === value.value);\n    }\n  };\n\n  return React.createElement(Select, Object.assign({\n    value: parseTimezone(value),\n    onChange: handleChange,\n    options: getOptions,\n    onBlur: onBlur\n  }, props));\n};\n\nexport default TimezoneSelect;","map":{"version":3,"sources":["../src/index.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import React from 'react';\nimport Select from 'react-select';\nimport spacetime from 'spacetime';\nimport { display } from 'spacetime-informal';\nexport const i18nTimezones = {\n    'Pacific/Midway': 'Midway Island, Samoa',\n    'Pacific/Honolulu': 'Hawaii',\n    'America/Juneau': 'Alaska',\n    'America/Boise': 'Mountain Time',\n    'America/Dawson': 'Dawson, Yukon',\n    'America/Chihuahua': 'Chihuahua, La Paz, Mazatlan',\n    'America/Phoenix': 'Arizona',\n    'America/Chicago': 'Central Time',\n    'America/Regina': 'Saskatchewan',\n    'America/Mexico_City': 'Guadalajara, Mexico City, Monterrey',\n    'America/Belize': 'Central America',\n    'America/Detroit': 'Eastern Time',\n    'America/Bogota': 'Bogota, Lima, Quito',\n    'America/Caracas': 'Caracas, La Paz',\n    'America/Santiago': 'Santiago',\n    'America/St_Johns': 'Newfoundland and Labrador',\n    'America/Sao_Paulo': 'Brasilia',\n    'America/Tijuana': 'Tijuana, Pacific Time',\n    'America/Argentina/Buenos_Aires': 'Buenos Aires, Georgetown',\n    'America/Godthab': 'Greenland',\n    'Atlantic/Azores': 'Azores',\n    'Atlantic/Cape_Verde': 'Cape Verde Islands',\n    GMT: 'Dublin, Edinburgh, Lisbon, London',\n    'Africa/Casablanca': 'Casablanca, Monrovia',\n    'Atlantic/Canary': 'Canary Islands',\n    'Europe/Belgrade': 'Belgrade, Bratislava, Budapest, Ljubljana, Prague',\n    'Europe/Sarajevo': 'Sarajevo, Skopje, Warsaw, Zagreb',\n    'Europe/Brussels': 'Brussels, Copenhagen, Madrid, Paris',\n    'Europe/Amsterdam': 'Amsterdam, Berlin, Bern, Rome, Stockholm, Vienna',\n    'Africa/Algiers': 'West Central Africa',\n    'Europe/Bucharest': 'Bucharest',\n    'Africa/Cairo': 'Cairo',\n    'Europe/Helsinki': 'Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius',\n    'Europe/Athens': 'Athens, Istanbul, Minsk',\n    'Asia/Jerusalem': 'Jerusalem',\n    'Africa/Harare': 'Harare, Pretoria',\n    'Europe/Moscow': 'Moscow, St. Petersburg, Volgograd',\n    'Asia/Kuwait': 'Kuwait, Riyadh',\n    'Africa/Nairobi': 'Nairobi',\n    'Asia/Baghdad': 'Baghdad',\n    'Asia/Tehran': 'Tehran',\n    'Asia/Dubai': 'Abu Dhabi, Muscat',\n    'Asia/Baku': 'Baku, Tbilisi, Yerevan',\n    'Asia/Kabul': 'Kabul',\n    'Asia/Yekaterinburg': 'Ekaterinburg',\n    'Asia/Karachi': 'Islamabad, Karachi, Tashkent',\n    'Asia/Kolkata': 'Chennai, Kolkata, Mumbai, New Delhi',\n    'Asia/Kathmandu': 'Kathmandu',\n    'Asia/Dhaka': 'Astana, Dhaka',\n    'Asia/Colombo': 'Sri Jayawardenepura',\n    'Asia/Almaty': 'Almaty, Novosibirsk',\n    'Asia/Rangoon': 'Yangon Rangoon',\n    'Asia/Bangkok': 'Bangkok, Hanoi, Jakarta',\n    'Asia/Krasnoyarsk': 'Krasnoyarsk',\n    'Asia/Shanghai': 'Beijing, Chongqing, Hong Kong SAR, Urumqi',\n    'Asia/Kuala_Lumpur': 'Kuala Lumpur, Singapore',\n    'Asia/Taipei': 'Taipei',\n    'Australia/Perth': 'Perth',\n    'Asia/Irkutsk': 'Irkutsk, Ulaanbaatar',\n    'Asia/Seoul': 'Seoul',\n    'Asia/Tokyo': 'Osaka, Sapporo, Tokyo',\n    'Asia/Yakutsk': 'Yakutsk',\n    'Australia/Darwin': 'Darwin',\n    'Australia/Adelaide': 'Adelaide',\n    'Australia/Sydney': 'Canberra, Melbourne, Sydney',\n    'Australia/Brisbane': 'Brisbane',\n    'Australia/Hobart': 'Hobart',\n    'Asia/Vladivostok': 'Vladivostok',\n    'Pacific/Guam': 'Guam, Port Moresby',\n    'Asia/Magadan': 'Magadan, Solomon Islands, New Caledonia',\n    'Asia/Kamchatka': 'Kamchatka, Marshall Islands',\n    'Pacific/Fiji': 'Fiji Islands',\n    'Pacific/Auckland': 'Auckland, Wellington',\n    'Pacific/Tongatapu': \"Nuku'alofa\",\n};\nconst TimezoneSelect = ({ value, onBlur, onChange, labelStyle = 'original', timezones = i18nTimezones, ...props }) => {\n    const getOptions = React.useMemo(() => {\n        return Object.entries(timezones)\n            .reduce((obj, entry) => {\n            const a = spacetime.now().goto(entry[0]);\n            const tz = a.timezone();\n            const tzDisplay = display(entry[0]);\n            let label = '';\n            let abbrev = entry[0];\n            let altName = entry[0];\n            if (tzDisplay && tzDisplay.daylight && tzDisplay.standard) {\n                abbrev = a.isDST()\n                    ? tzDisplay.daylight.abbrev\n                    : tzDisplay.standard.abbrev;\n                altName = a.isDST()\n                    ? tzDisplay.daylight.name\n                    : tzDisplay.standard.name;\n            }\n            const min = tz.current.offset * 60;\n            const hr = `${(min / 60) ^ 0}:` + (min % 60 === 0 ? '00' : Math.abs(min % 60));\n            const prefix = `(GMT${hr.includes('-') ? hr : `+${hr}`}) ${entry[1]}`;\n            switch (labelStyle) {\n                case 'original':\n                    label = prefix;\n                    break;\n                case 'altName':\n                    label = `${prefix} ${!altName.includes('/') ? `(${altName})` : ''}`;\n                    break;\n                case 'abbrev':\n                    label = `${prefix} ${abbrev.length < 5 ? `(${abbrev})` : ''}`;\n                    break;\n                default:\n                    label = `${prefix}`;\n            }\n            obj.push({\n                value: entry[0],\n                label: label,\n                offset: tz.current.offset,\n                abbrev: abbrev,\n                altName: altName,\n            });\n            return obj;\n        }, [])\n            .sort((a, b) => {\n            return a.offset - b.offset;\n        });\n    }, [labelStyle, timezones]);\n    const handleChange = (tz) => {\n        onChange && onChange(tz);\n    };\n    const parseTimezone = (value) => {\n        if (typeof value === 'object' && value.value && value.label)\n            return value;\n        if (typeof value === 'string') {\n            return getOptions.find(tz => tz.value === value);\n        }\n        else if (value.value && !value.label) {\n            return getOptions.find(tz => tz.value === value.value);\n        }\n    };\n    return (React.createElement(Select, Object.assign({ value: parseTimezone(value), onChange: handleChange, options: getOptions, onBlur: onBlur }, props)));\n};\nexport default TimezoneSelect;\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}